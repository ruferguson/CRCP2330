/**
 * Implements the Catch Fruit game.
 * This simple game allows the user to move a black rectangle (basket) around to catch falling squares (fruit).
 * The 'q' key is used to quit the game.
 */

class CatchFruitGame {
    field Basket basket; // the basket of this game
    field Fruit fruit; // the fruit of the game
    field int direction; // the basket's current direction: 
                        // 0=none, 1=left, 2=right
    field int score;
    field String s, m;
    field int xp1, yp1, x1, y1;
    field int activeFruit;

    field boolean exit;

    /** Constructs a new Catch Fruit Game. */
   	constructor CatchFruitGame new() {
      let basket = Basket.new(0, 225, 45, 5);
      let direction = 0;  // initial state is no movement

      let fruit = Fruit.new();

      let activeFruit = 1;
      let score = 0;
      let s = " Score: ";
      let m = " WINNER! Thank you for playing! ";

      let exit = false;

      return this;
    }

	  /** Disposes this game. */
    method void dispose() {
      do basket.dispose();
      do Memory.deAlloc(this);
      return;
    }

    /** Moves the basket in the current direction. */
    method void moveBasket() {
       if (direction = 1) { do basket.moveLeft(); }
       if (direction = 2) { do basket.moveRight(); }
       if (direction = 3) { do basket.draw(); }
       do Sys.wait(4);  // delays the next movement
       return;
    }

    /** Runs the game: handles the user's inputs and moves the basket accordingly */
    method void run() {
      	var char key;  // the key currently pressed by the user

       	while (~exit) {
       		// waits for a key to be pressed
       		while (key = 0) {
            do Output.moveCursor(1, 0);
            do Output.printString(s);
            do updateBasket();
            do dropFruit();
          	let key = Keyboard.keyPressed();
            let direction = 3;
            do showScore();
      		}
       		if (key = 81)  { let exit = true; }     // q key
        	if (key = 130) { let direction = 1; }   // left arrow
        	if (key = 132) { let direction = 2; }   // right arrow
          do moveBasket();
         	// waits for the key to be released
        	while (~(key = 0)) {
            	let key = Keyboard.keyPressed();
              do dropFruit();
              do moveBasket();
         	}
     	}
    	return;
  }

  method void dropFruit() {
    var int j;
    var Fruit curFruit;
    let j = 0;

    do Sys.wait(5);
    do fruit.fall();
    if (fruit.intersectBasket(xp1, x1, yp1, y1)) {
        do basket.draw();
        do fruit.dispose();
        let fruit = Fruit.new();
        let score = score + 1;
    }
    if (fruit.intersectGrass()) {
        do basket.draw();
        do fruit.dispose();
        let fruit = Fruit.new();
        let score = score - 1;
    }
    do showScore();
    return;
  }

  method void showScore() {
    do Output.moveCursor(1, 9);
    do Output.moveCursor(1, 8);
    do Output.printInt(score);
    if (score > 20) {
      do Screen.setColor(false);
      do Screen.drawRectangle(0, 0, 511, 254);
      do Output.moveCursor(10, 15);
      do Output.printString(m);
      let exit = true;
    }
    return;
  }

  method void updateBasket() {
    let xp1 = basket.getXP();
    let x1 = basket.getX();
    let yp1 = basket.getYP();
    return;
  }
}