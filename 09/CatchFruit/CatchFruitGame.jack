/**
 * Implements the Catch Fruit game.
 * This simple game allows the user to move a black rectangle (basket) around to catch falling squares (fruit).
 * The 'q' key is used to quit the game.
 */

class CatchFruitGame {
    field Basket basket; // the basket of this game
    field Fruit fruit; // the fruit of the game
    field int direction; // the basket's current direction: 
                        // 0=none, 1=left, 2=right
    field Array fruitArray;
    field int fruitLength;
    field int i, sum;
    field int activeFruit = 0;

    field int timer;

    /** Constructs a new Catch Fruit Game. */
   	constructor CatchFruitGame new() {
      // Creates a 30 by 30 pixels Basket and positions it at the bottom of the screen.
      let basket = Basket.new(0, 225, 30, 5);
      let direction = 0;  // initial state is no movement

      let timer = 0;

      let length = 1000;
      let fruitArray = Array.new(fruitLength);
      let i = 0;
      while (i < fruitLength) {
        let a[i] = Keyboard.readInt(”Enter a number: ”);
        let sum = sum + a[i];
        let i = i + 1;
      }
      return this;
    }

	  /** Disposes this game. */
    method void dispose() {
      do basket.dispose();
      do Memory.deAlloc(this);
      return;
    }

    /** Moves the basket in the current direction. */
    method void moveBasket() {
       if (direction = 1) { do basket.moveLeft(); }
       if (direction = 2) { do basket.moveRight(); }
       do Sys.wait(2);  // delays the next movement
       return;
    }

    /** Runs the game: handles the user's inputs and moves the basket accordingly */
    method void run() {
      	var char key;  // the key currently pressed by the user
       	var boolean exit;
       	let exit = false;
        
        timer();

       	while (~exit) {
       		// waits for a key to be pressed
       		while (key = 0) {
            	let key = Keyboard.keyPressed();
            	do moveBasket();
      		}
       		if (key = 81)  { let exit = true; }     // q key
        	if (key = 130) { let direction = 1; }   // left arrow
        	if (key = 132) { let direction = 2; }   // right arrow
         	// waits for the key to be released
        	while (~(key = 0)) {
            	let key = Keyboard.keyPressed();
            	do moveBasket();
         	}
     	} // while
    	return;
    }

  method void dropFruit() {
    for (int i = 0; i < activeFruit; i++) {
      fruitArray[i].showFruit();
      fruitArray[i].drop();
      if (basket.intersect(fruitArray[i])) {
        fruitArray[i].caught();
        score ++;
      } //else if (fruitArray[i].intersectGrass() == true){
       // decreaseHealth();
      }
    }
  }

  method void timer() {
    if (timer > 100) {
      let timer = 0;

    }
    timer ++;
  }
}